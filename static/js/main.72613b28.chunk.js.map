{"version":3,"sources":["store/index.ts","components/elements/salaryResult/SalaryResult.tsx","components/elements/input/SalaryNumberInput.tsx","components/elements/switcher/NdflSwitcher.tsx","constants/SalaryForm.ts","components/elements/radioButtons/RadioButton.tsx","components/containers/CustomForm/index.tsx","App.tsx","index.tsx"],"names":["rootReducer","combineReducers","form","formReducer","store","createStore","ndflValue","SalaryResult","withoutndfl","salary","salaryForEmployeeWithNdfl","toFixed","TaxWithNdfl","TaxWithoutNdfl","salaryForEmployeeWithoutNdfl","Container","fluid","className","Row","NumberInput","wrappedFieldInputProps","input","props","Form","Group","controlId","InputGroup","Append","Control","placeholder","type","Text","Switcher","wrappedSwitcherProps","Label","value","Check","checked","salaryFormName","salaryFormFieldNames","SALARY_TYPES_OPTIONS","id","name","tooltipTypeOfSalaryId","INITIAL_SALARY_VALUES","typeOfSalary","RadioButtons","wrappedRadioButtonProps","useState","showTooltip","setShowTooltip","target","useRef","handleCloseShowTooltip","handleOpenShowTooltip","map","label","ref","onMouseEnter","onClick","style","cursor","color","size","Overlay","current","show","placement","arrowProps","popper","SalaryForm","reduxForm","initialValues","selector","formValueSelector","useSelector","state","Col","xs","Field","component","App","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.72613b28.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nconst rootReducer = combineReducers({\n  form: formReducer,\n});\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport './SalaryResult.scss';\n\nconst ndflValue = 0.13;\nconst hundredPercent = 1;\n\ntype TSalaryResultProps = {\n  withoutndfl?: boolean;\n  salary: number;\n};\n\nexport const SalaryResult: React.FC<TSalaryResultProps> = ({ withoutndfl, salary }) => {\n  const salaryForEmployeeWithNdfl = (salary * (hundredPercent - ndflValue)).toFixed(0);\n  const TaxWithNdfl = (salary * ndflValue).toFixed(0);\n  const TaxWithoutNdfl = (salary * (ndflValue / (hundredPercent - ndflValue))).toFixed(0);\n  const salaryForEmployeeWithoutNdfl = (salary / (hundredPercent - ndflValue)).toFixed(0);\n  return (\n    <Container fluid className=\"salary-result-bg m-0 p-3\">\n      <Row className=\"m-0 p-1\">\n        <div>\n          <span>{withoutndfl ? salary : salaryForEmployeeWithNdfl} &#8381; </span>\n          сотрудник будет получать на руки\n        </div>\n      </Row>\n      <Row className=\"m-0 p-1\">\n        <div>\n          <span>{withoutndfl ? TaxWithoutNdfl : TaxWithNdfl} &#8381; </span> НДФЛ, 13% от оклада\n        </div>\n      </Row>\n      <Row className=\"m-0 p-1\">\n        <div>\n          <span>{withoutndfl ? salaryForEmployeeWithoutNdfl : salary} &#8381; </span> за сотрудника в месяц\n        </div>\n      </Row>\n    </Container>\n  );\n};\n","import React from 'react';\nimport { WrappedFieldInputProps } from 'redux-form';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport './SalaryInput.scss';\n\ntype TSalaryNumberInputProps = {\n  input: WrappedFieldInputProps;\n};\n\nexport const NumberInput: React.FC<TSalaryNumberInputProps> = ({\n  input: wrappedFieldInputProps,\n  ...props\n}: TSalaryNumberInputProps) => {\n  return (\n    <Form.Group controlId=\"salary\">\n      <InputGroup.Append>\n        <Form.Control className=\"salary-input\" placeholder=\"З/П\" type=\"number\" {...wrappedFieldInputProps} {...props} />\n        <InputGroup.Text>&#8381;</InputGroup.Text>\n      </InputGroup.Append>\n    </Form.Group>\n  );\n};\n","import React from 'react';\nimport { WrappedFieldInputProps } from 'redux-form';\nimport Form from 'react-bootstrap/Form';\nimport './NdflSwitcher.scss';\n\ntype TSalarySwitcherProps = {\n  input: WrappedFieldInputProps;\n};\n\nexport const Switcher: React.FC<TSalarySwitcherProps> = ({\n  input: wrappedSwitcherProps,\n  ...props\n}: TSalarySwitcherProps) => {\n  return (\n    <Form.Group controlId=\"withoutndfl\" className=\"d-flex\">\n      <Form.Label\n        className={\n          wrappedSwitcherProps.value ? 'pr-3 custom-control-label-inactive' : 'pr-3 custom-control-label-active'\n        }\n      >\n        Указать с НДФЛ\n      </Form.Label>\n      <Form.Check type=\"switch\" checked={wrappedSwitcherProps.value} {...wrappedSwitcherProps} {...props} />\n      <Form.Label\n        className={\n          wrappedSwitcherProps.value ? 'pl-1 custom-control-label-active' : 'custom-control-label-inactive pl-1'\n        }\n      >\n        Без НДФЛ\n      </Form.Label>\n    </Form.Group>\n  );\n};\n","import { ISalary, ITypeOfSalary } from '../interfaces/Salary';\n\nexport const salaryFormName = 'salaryForm';\n\nexport const salaryFormFieldNames = {\n  salary: 'salary',\n  withoutndfl: 'withoutndfl',\n  typeOfSalary: 'typeOfSalary',\n} as const;\n\nexport const SALARY_TYPES_OPTIONS: ITypeOfSalary[] = [\n  { id: '1', name: 'Оклад за месяц' },\n  { id: '2', name: 'МРОТ' },\n  { id: '3', name: 'Оплата за день' },\n  { id: '4', name: 'Оплата за час' },\n];\n\nexport const tooltipTypeOfSalaryId = SALARY_TYPES_OPTIONS[1].id;\n\nexport const INITIAL_SALARY_VALUES: ISalary = {\n  salary: 40000,\n  withoutndfl: true,\n  typeOfSalary: '1',\n};\n","import React, { useRef, useState } from 'react';\nimport { WrappedFieldInputProps } from 'redux-form';\nimport Form from 'react-bootstrap/Form';\nimport Overlay from 'react-bootstrap/Overlay';\nimport './RadioButtons.scss';\nimport { SALARY_TYPES_OPTIONS, tooltipTypeOfSalaryId } from '../../../constants/SalaryForm';\nimport { InfoCircle, XCircle } from 'react-bootstrap-icons';\n\ntype TSalaryRadioButtonsProps = {\n  input: WrappedFieldInputProps;\n};\n\nexport const RadioButtons: React.FC<TSalaryRadioButtonsProps> = ({\n  input: wrappedRadioButtonProps,\n  ...props\n}: TSalaryRadioButtonsProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n  const target = useRef(null);\n\n  const handleCloseShowTooltip = () => setShowTooltip(false);\n  const handleOpenShowTooltip = () => setShowTooltip(true);\n\n  return (\n    <Form.Group controlId=\"typeOfSalary\">\n      {SALARY_TYPES_OPTIONS.map(({ id, name }) => (\n        <div key={id} className=\"d-flex\">\n          <Form.Check\n            label={name}\n            type=\"radio\"\n            id={`${name}-${id}`}\n            checked={wrappedRadioButtonProps.value === id}\n            {...wrappedRadioButtonProps}\n            value={id}\n            {...props}\n          />\n          {tooltipTypeOfSalaryId === id && (\n            <div\n              ref={target}\n              onMouseEnter={handleOpenShowTooltip}\n              onClick={handleCloseShowTooltip}\n              style={{ cursor: 'pointer' }}\n            >\n              {showTooltip ? <XCircle color=\"royalblue\" size={20} /> : <InfoCircle color=\"royalblue\" size={20} />}\n            </div>\n          )}\n        </div>\n      ))}\n      <Overlay target={target.current} show={showTooltip} placement=\"bottom-start\">\n        {({ placement, arrowProps, show: _show, popper, ...props }) => (\n          <div\n            className=\"tooltip-text\"\n            {...props}\n            style={{\n              ...props.style,\n            }}\n          >\n            МРОТ -минимальный размер оплаты труда. Разный для разных регионов.\n          </div>\n        )}\n      </Overlay>\n    </Form.Group>\n  );\n};\n","import React from 'react';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport { DefaultRootState, useSelector } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { SalaryResult } from '../../elements/salaryResult/SalaryResult';\nimport { NumberInput } from '../../elements/input/SalaryNumberInput';\nimport { Switcher } from '../../elements/switcher/NdflSwitcher';\nimport { RadioButtons } from '../../elements/radioButtons/RadioButton';\nimport { INITIAL_SALARY_VALUES, salaryFormFieldNames, salaryFormName } from '../../../constants/SalaryForm';\nimport { ISalary } from '../../../interfaces/Salary';\n\nconst SalaryFormTemplate: React.FC = () => {\n  const selector = formValueSelector(salaryFormName);\n  const { salary, withoutndfl, typeOfSalary } = useSelector<DefaultRootState, ISalary>((state) =>\n    selector(state, 'salary', 'withoutndfl', 'typeOfSalary'),\n  );\n  return (\n    <Container fluid>\n      <Form>\n        <Row className=\"justify-content-md-center\">\n          <Col xs={6}>\n            <Row>\n              <Form.Label className=\"text-secondary\">Сумма</Form.Label>\n            </Row>\n            <Row className=\"pl-4\">\n              <Field name={salaryFormFieldNames.typeOfSalary} component={RadioButtons} />\n            </Row>\n            <Row className=\"pl-4\">\n              <Field name={salaryFormFieldNames.withoutndfl} component={Switcher} />\n            </Row>\n            <Row className=\"pl-4\">\n              <Field name={salaryFormFieldNames.salary} component={NumberInput} />\n            </Row>\n            <Row>\n              {typeOfSalary === INITIAL_SALARY_VALUES.typeOfSalary && (\n                <SalaryResult withoutndfl={withoutndfl} salary={salary} />\n              )}\n            </Row>\n          </Col>\n        </Row>\n      </Form>\n    </Container>\n  );\n};\n\nexport const SalaryForm = reduxForm<ISalary>({\n  form: salaryFormName,\n  initialValues: INITIAL_SALARY_VALUES,\n})(SalaryFormTemplate);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.scss';\nimport store from './store';\nimport { SalaryForm } from './components/containers/CustomForm';\n\nconst App = () => (\n  <Provider store={store}>\n    <SalaryForm />\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}